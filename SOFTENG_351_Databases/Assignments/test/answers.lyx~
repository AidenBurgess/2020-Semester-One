#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% Variables to change every new document
\newcommand{\hmwkClass}{SOFTENG 351} % Course/class
\newcommand{\hmwkNumber}{} % Assignment number

% Constants to set once
\newcommand{\hmwkAuthorName}{Aiden Burgess} % Your name
\newcommand{\hmwkUserID}{abur970} % User ID
\newcommand{\hmwkStudentNumber}{600280511} % Student number

% Packages
\usepackage{fancyhdr} % Required for custom headers
\usepackage{lastpage} % Required to determine the last page for the footer
\usepackage{extramarks} % Required for headers and footers

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

% General document properties
\linespread{1.1} % Line spacing
\setlength\parindent{0pt} % Removes all indentation from paragraphs

% Required to not count titlepage in page numbering
\addtocounter {page} {-1}

% Make a simple command for use in document body
\newcommand{\start}{
\maketitle
\thispagestyle{empty}
\newpage
}

% Set up the header and footer
\pagestyle{fancy}
\lhead{\hmwkAuthorName} % Top left header
\rhead{\hmwkClass: Test}
\lfoot{\lastxmark} % Bottom left footer
\cfoot{} % Bottom center footer
\rfoot{Page\ \thepage\ of\ \protect\pageref{LastPage}} % Bottom right footer
\renewcommand\headrulewidth{0.4pt} % Size of the header rule
\renewcommand\footrulewidth{0.4pt} % Size of the footer rule

% The following 2 commands setup the title page
\title{
\vspace{2in}
\textmd{\textbf{\hmwkClass:\ Test \hmwkNumber}}\\
\normalsize\vspace{0.1in}\small{ \today }\\
\vspace{3in}
}

\author{
  \textbf{\hmwkAuthorName} \\
  \texttt{\hmwkUserID \hspace{0.1in}- \hmwkStudentNumber}
}

% Do not display standard date since we use a custom date
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
start
\end_layout

\end_inset


\end_layout

\begin_layout Section*
1
\end_layout

\begin_layout Subsection*
a) What are the main advantages of using a database solution?
\end_layout

\begin_layout Standard
Data abstraction allows storage details to be hidden so users can see a
 conceptual view of the database.
\end_layout

\begin_layout Standard
Programs refer to data model constructs rather than data storage details.
\end_layout

\begin_layout Standard
Support of multiple views of the data.
\end_layout

\begin_layout Standard
Allowing a set of concurrent users to retrieve from and to update the database.
\end_layout

\begin_layout Standard
Concurrency control within the DBMS guarantees that each transaction is
 correctly executed or aborted.
\end_layout

\begin_layout Standard
Recovery subsystem ensures each completed transaction has its effect permanently
 recorded in the database.
\end_layout

\begin_layout Standard
Controlling redundancy in data storage and in development and maintenance
 efforts.
\end_layout

\begin_layout Standard
Restricting unauthorized access to data.
 Only the DBA staff uses privileged commands and facilities.
\end_layout

\begin_layout Standard
Providing storage structures for efficient query processing.
\end_layout

\begin_layout Standard
Providing backup and recovery services.
\end_layout

\begin_layout Standard
Providing multiple interfaces to different classes of users.
\end_layout

\begin_layout Standard
Representing complex relationships among data.
\end_layout

\begin_layout Standard
Enforcing integrity constraints on the database.
\end_layout

\begin_layout Subsection*
b) What are the different types of database users (give examples of each
 types)?
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Actors on the Scene
\begin_inset Quotes erd
\end_inset

 - Those who actually use and control the database content, and those who
 design, develop and maintain database applications.
\end_layout

\begin_layout Standard
Examples of this type are: database administrators, database designers,
 end-users, system analysts, application programmers and Business Analysts.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Workers Behind the Scene
\begin_inset Quotes erd
\end_inset

 - Those who design and develop the DBMS software and related tools, and
 the computer systems operators
\end_layout

\begin_layout Standard
Examples of this type are: DBMS system designers and implementors, database
 tool developers, operators and maintenance personnel.
\end_layout

\begin_layout Section*
2
\end_layout

\begin_layout Subsection*
a)
\end_layout

\begin_layout Standard
Assumptions:
\end_layout

\begin_layout Itemize
A member can put any amount of items for sale.
\end_layout

\begin_layout Itemize
An item has only one seller.
\end_layout

\begin_layout Itemize
An item does not need to be sold.
\end_layout

\begin_layout Itemize
A member can buy any amount of items.
\end_layout

\begin_layout Itemize
A member can bid on an item multiple times.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pasted1.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Entity-Relationship diagram for online auction database system
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
b)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pasted2.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Relational database schema
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
3
\end_layout

\begin_layout Subsection*
a)
\end_layout

\begin_layout Subsubsection*
i.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

(SELECT Ssn, Fname, Lname
\end_layout

\begin_layout Plain Layout

FROM EMPLOYEE
\end_layout

\begin_layout Plain Layout

WHERE Dno=1)
\end_layout

\begin_layout Plain Layout

UNION
\end_layout

\begin_layout Plain Layout

(SELECT S.Ssn, S.Fname, S.Lname
\end_layout

\begin_layout Plain Layout

FROM EMPLOYEE AS S, Employee AS E
\end_layout

\begin_layout Plain Layout

WHERE E.Superssn=S.Ssn AND S.Dno=1)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
ii.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT Dnumber, Dname, AVG(Salary)AS AVG_Sal
\end_layout

\begin_layout Plain Layout

FROM DEPARTMENT, EMPLOYEE
\end_layout

\begin_layout Plain Layout

WHERE Dnumber=Dno
\end_layout

\begin_layout Plain Layout

GROUP BY Dnumber
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
iii.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT Ssn
\end_layout

\begin_layout Plain Layout

FROM EMPLOYEE
\end_layout

\begin_layout Plain Layout

LEFT JOIN DEPENDENT
\end_layout

\begin_layout Plain Layout

ON DEPENDENT.Essn=EMPLOYEE.Ssn
\end_layout

\begin_layout Plain Layout

WHERE Essn IS NULL 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
b)
\end_layout

\begin_layout Subsubsection*
i.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

CREATE VIEW DEPARTMENT_MANAGERS
\end_layout

\begin_layout Plain Layout

AS SELECT Dname, Fname, Lname, Salary
\end_layout

\begin_layout Plain Layout

FROM DEPARTMENT, EMPLOYEE
\end_layout

\begin_layout Plain Layout

WHERE Mgr_ssn=Ssn
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
ii.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

CREATE VIEW ADMINISTRATION_EMPLOYEES
\end_layout

\begin_layout Plain Layout

AS SELECT E.Fname, E.Lname, S.Fname AS Sup_Fname, S.Lname AS Sup_Lname, E.Salary
\end_layout

\begin_layout Plain Layout

FROM EMPLOYEE AS E, EMPLOYEE AS S, DEPARTMENT AS D
\end_layout

\begin_layout Plain Layout

WHERE S.Ssn=E.Super_ssn AND D.Dname = 'Administration' AND E.Dno=D.Dnumber
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
c)
\end_layout

\begin_layout Subsubsection*
i.
\end_layout

\begin_layout Standard
Retrieve the names of employees (show Fname and Lname) who do not work on
 any project
\end_layout

\begin_layout Standard
\begin_inset Formula $EMP\_PROJECT(Ssn)\leftarrow EMPLOYEE\bowtie_{Ssn=Essn}WORKS\_ON$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $EMP\_NO\_PROJECT\leftarrow\pi_{Ssn}(EMPLOYEE)-EMP\_PROJECT$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $RESULT\leftarrow\pi_{Fname,\,Lname}(EMP\_NO\_PROJECT*EMPLOYEE)$
\end_inset


\end_layout

\begin_layout Subsubsection*
ii.
\end_layout

\begin_layout Standard
Retrieve the names of employees (show Fname and Lname) who work on every
 project.
\end_layout

\begin_layout Standard
\begin_inset Formula $SSN\_ALL\_PROJECTS(Ssn)\leftarrow\pi_{Essn,Pno}(WORKS\_ON)\,\div\,\rho_{(Pno)}\pi_{Pnumber}(PROJECT)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $RESULT\leftarrow\pi_{Fname,\,Lname}(SSN\_ALL\_PROJECTS*EMPLOYEE)$
\end_inset


\end_layout

\begin_layout Subsubsection*
iii.
\end_layout

\begin_layout Standard
Retrieve the average salaries of all male and female employees, (show Gender
 and Average_Salary).
\end_layout

\begin_layout Standard
DNO ℱCOUNT SSN, AVERAGE Salary (EMPLOYEE) 
\end_layout

\begin_layout Standard
\begin_inset Formula $RESULT(Gender,\,Average\_Salary)\leftarrow{}_{Sex}\Im_{AVERAGE\,Salary}(EMPLOYEE)$
\end_inset


\end_layout

\begin_layout Section*
4
\end_layout

\begin_layout Standard
Based on the given primary key and the additional function dependencies,
 is this relation in 1NF, 2NF, or 3NF? Why or why not? How would you successivel
y normalize it completely to 2NF and 3NF? 
\end_layout

\begin_layout Subsubsection*
1NF Check
\end_layout

\begin_layout Standard
Each attribute value appears to be single atomic, therefore the relation
 satisfies 1NF.
\end_layout

\begin_layout Subsubsection*
2NF Check
\end_layout

\begin_layout Standard
Every non-prime attribute must be fully functionally dependent on (Car_no,
 Salesman_id).
 This is clearly not true as Date_sold is only functionally dependent on
 Car_no.
 Therefore, the relation is not 2NF.
\end_layout

\begin_layout Subsubsection*
3NF Check
\end_layout

\begin_layout Standard
The relation is not 3NF as it is not 2NF.
\end_layout

\begin_layout Subsubsection*
Normalize to 2NF
\end_layout

\begin_layout Standard
All non-prime attributes are associated only with the part of the original
 primary key on which they are fully functionally dependent in the decomposed
 2NF relations.
\end_layout

\begin_layout Standard
i.e.
 
\end_layout

\begin_layout Standard
SALE_DISCOUNT(Car_no, Salesman_id, Discount_amt)
\end_layout

\begin_layout Standard
SALE_DATE(Car_no, Date_sold)
\end_layout

\begin_layout Standard
COMMISION(Salesman_id, Commision)
\end_layout

\begin_layout Subsubsection*
Normalize to 3NF
\end_layout

\end_body
\end_document
